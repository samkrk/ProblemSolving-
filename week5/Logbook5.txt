%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

PROBLEM #1
Multiples

Design Ideas: For this problem I think we can just use brute force, starting from 
the minimum value and then checking if this number mod factor is zero. 

Reflection: Pretty straightforward. Passed on first attempt 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

PROBLEM #2
Run Length Encoding

Design Ideas: 
Loop across each element in the input string, if its a number, add n times the next 
letter to the result string. If its just a letter, add it to the result string. 

Trouble Shooting: 
So my code works but I didn't realise we could have more than 1 digit in a row. 
The hardest part about this problem I would say, is extracting the numbers from the string. I can't really see 
a clear way to extend my current approach to work for numbers with more than one digit so I will have to 
rethink my strategy. 

I will make a helper function called findNumber which will be called when we encounter a digit in 
the main loop. This findNumber function will find and return the number in the string and return 
the index to continue the search at. 

Failed a test with input: 9999999999999999999999999999999999999999999999999X. Probably due to integer 
overflow so just added a check to my findNumber function that in the case where the number is 
larger than 50 we break and can return TOO LONG. 

Now passed 95/100 but failed test "100W". Needed to change the 'else' statement to an 'else if' statement 
in my helper function. Passed all cases now.

Reflection: 
This problem took longer than I would have liked. Good practice anyway since the difficulty of 
this question felt pretty similar to the ones in the practice exams. Just need to get quicker and 
try to cover all bases on the first attempt. 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

PROBLEM #3
RGB Street

Design Ideas:
So we could use brute force for this problem, and since the number of houses is not greater than 20, 
brute force should be possible. On the other hand I would rather not use brute force and would like 
to find a quicker and more elegant solution. 

I think we could use recursion, so we start with the first element of houses, selecting the cheapest 
colour and then we call a recursive function with the rest of the houses, but the next house cannot 
be the same colour as the previous. 

To extract the painting costs from each house I will use ss stream and put all the values in a 
matrix. Once I have the costs in a matrix, my recursive function will be given this matrix, as well 
as the colour of the previous house, and the current index of houses we are working on. The base 
case will be when there is only 1 house left, and we will simply choose the cheapest option as long 
as its not the same colour as the previous house. The recursive case will be calling the function 
again, but we will have to call it twice since we have two colours to choose from. Then we will 
compare which of the two function calls was cheaper and return the cheaper one. 

Reflection:
This approach worked although it's very slow and took several minutes for the autograder to finish. 
I was happy with my plan and it was good that it passed on the first attempt. It was also good 
to use ss stream again since I don't normally use this and still need to get familiar with 
the functionality. 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

PROBLEM #4
House Building

Design Ideas:
I think for this problem, I will start by finding the average height of the area. Lets 
say we get 4.5. Then we can calculate the difference between each element and 4, if it's 
smaller than 4, and each element and 5, if it's greater than 5. 

This sometimes works, but not every time. In some cases it's best to round down to 3 and 4 or 
up again to 5 and 6. So I think I will just try several pairs of numbers, near the average, and 
then return the lowest effort value. 

I was going to convert the vector of strings, area, into a matrix, but I think it will be quicker 
and easier if we just have a vector which contains the number of occurances of each digit. 

Trouble Shooting:
First upload had a compile fail due to using INT_MAX. Going to upload again using a value close 
to the INT_MAX, i.e. 2147483600.

So my second upload compiled correctly, and I passed 78/100 test cases, but after some inspection, the test case I failed 
was using the levels of (avg+1,avg+2), which I wasnt accounting for. So I'm not sure if I should set up a for loop that 
tries every pair of levels, or simply add another case for this one I missed. 

Reflection:
I ended up loop through each pair of levels and then finding the minimum one, so I didn't actually need to calculate the average. 
This was a pretty good result since I ended up removing a lot of code and the whole solution was really only about 35 lines long.
This was the first 4* problem I've attempted and it wasn't as bad as I thought it would be. I'm not sure why it was 4* to be honest, 
it felt no harder than the 3* problems. Either way it was good to get it done.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

END OF WEEK REFLECTION
Overall I was happy with how I went this week. Attempted some easier problems at the start to work on my speed for the prac exams, but 
also did the bonus problem and a 4* problem to finish. Got some practice using ss stream which is a pretty helpful tool to have. 
Probably my most problem-free week so far which is a good sign. Only had to submit at most a couple of times for the problems so I'm 
happy with that. 